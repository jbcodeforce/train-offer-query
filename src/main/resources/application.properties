quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=INFO
quarkus.swagger-ui.always-include=true


quarkus.container-image.group=trainquery
quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000
# expose route
quarkus.openshift.expose=true
quarkus.openshift.labels.app=train_offer_query
quarkus.http.port=8080
quarkus.http.test-port=8081

quarkus.openshift.env.configmaps=offer-query-cm
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.from-secret=light-es-cluster-ca-cert
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.with-key=ca.password
quarkus.openshift.mounts.es-cert.path=/deployments/certs/server
quarkus.openshift.secret-volumes.es-cert.secret-name=light-es-cluster-ca-cert

mp.messaging.incoming.search.connector=smallrye-kafka
mp.messaging.incoming.search.topic=searchResponses
mp.messaging.incoming.search.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.search.value.deserializer=ibm.gse.eda.infrastructure.SearchResponseDeserializer

mp.messaging.incoming.offers.connector=smallrye-kafka
mp.messaging.incoming.offers.topic=offers
mp.messaging.incoming.offers.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.offers.value.deserializer=ibm.gse.eda.infrastructure.OfferDeserializer


ibm.gse.eda.infrastructure.MapperClient/mp-rest/url=${SEARCH_URL:http://localhost:8081/}
ibm.gse.eda.infrastructure.MapperClient/mp-rest/scope=javax.inject.Singleton
ibm.gse.eda.infrastructure.MapperClient/mp-rest/hostnameVerifier=io.quarkus.restclient.NoopHostnameVerifier